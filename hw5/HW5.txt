1. It shows that the FSM states (state_bit_0 and state_bit_1) and the detected signal are implemented using D-type flip-flops, initialized to low. 
-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.
--C1L5Q is fsm:top_fsm|CurrentState.state_bit_0 at FF_X10_Y1_N22
--register power-up is low

C1L5Q = DFFEAS(C1L6, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


--C1L8Q is fsm:top_fsm|CurrentState.state_bit_1 at FF_X10_Y1_N25
--register power-up is low

C1L8Q = DFFEAS(C1L3, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


--C1L4 is fsm:top_fsm|CurrentState.READ_VAL~0 at MLABCELL_X52_Y1_N27
C1L4 = ( C1L9Q ) # ( !C1L9Q & ( C1L7Q ) );


--C1L10 is fsm:top_fsm|CurrentState.VAL_TRUE~0 at MLABCELL_X52_Y1_N6
C1L10 = ( C1L9Q & ( !C1L7Q ) );


--C1_detected is fsm:top_fsm|detected at FF_X10_Y1_N8
--register power-up is low

C1_detected = DFFEAS(C1L2, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


--C1L6 is fsm:top_fsm|CurrentState.state_bit_0~0 at LABCELL_X10_Y1_N21
C1L6 = ( !C1L8Q & ( (!C1_detected) # (!C1L5Q) ) );


--C1L3 is fsm:top_fsm|CurrentState.CHECK_VAL~0 at LABCELL_X10_Y1_N24
C1L3 = ( !C1L8Q & ( C1L5Q ) );


--C1L1 is fsm:top_fsm|check_proc~0 at LABCELL_X10_Y1_N18
C1L1 = ( A1L22 & ( (A1L26 & (!A1L24 & A1L20)) ) );


--C1L2 is fsm:top_fsm|check_proc~1 at LABCELL_X10_Y1_N6
C1L2 = ( A1L32 & ( A1L30 & ( (A1L34 & (!A1L28 & C1L1)) ) ) );


--A1L9 is led[0]~output at IOOBUF_X52_Y0_N2
A1L9 = OUTPUT_BUFFER.O(.I(C1L4), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[0] is led[0] at PIN_V16
led[0] = OUTPUT();


--A1L11 is led[1]~output at IOOBUF_X52_Y0_N19
A1L11 = OUTPUT_BUFFER.O(.I(C1L9Q), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[1] is led[1] at PIN_W16
led[1] = OUTPUT();


--A1L13 is led[2]~output at IOOBUF_X60_Y0_N2
A1L13 = OUTPUT_BUFFER.O(.I(C1L10), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[2] is led[2] at PIN_V17
led[2] = OUTPUT();


--A1L15 is led[3]~output at IOOBUF_X80_Y0_N2
A1L15 = OUTPUT_BUFFER.O(.I(C1L10), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[3] is led[3] at PIN_V18
led[3] = OUTPUT();


--A1L6 is dout~output at IOOBUF_X10_Y0_N42
A1L6 = OUTPUT_BUFFER.O(.I(C1_detected), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--dout is dout at PIN_AG1
dout = OUTPUT();


--A1L3 is clk~input at IOIBUF_X32_Y0_N1
A1L3 = INPUT_BUFFER(.I(clk), );


--clk is clk at PIN_AF14
clk = INPUT();


--A1L17 is reset~input at IOIBUF_X36_Y0_N1
A1L17 = INPUT_BUFFER(.I(reset), );


--reset is reset at PIN_AA14
reset = INPUT();


--A1L28 is switch[4]~input at IOIBUF_X2_Y0_N41
A1L28 = INPUT_BUFFER(.I(switch[4]), );


--switch[4] is switch[4] at PIN_AD11
switch[4] = INPUT();


--A1L30 is switch[5]~input at IOIBUF_X16_Y0_N18
A1L30 = INPUT_BUFFER(.I(switch[5]), );


--switch[5] is switch[5] at PIN_AD12
switch[5] = INPUT();


--A1L32 is switch[6]~input at IOIBUF_X4_Y0_N35
A1L32 = INPUT_BUFFER(.I(switch[6]), );


--switch[6] is switch[6] at PIN_AE11
switch[6] = INPUT();


--A1L34 is switch[7]~input at IOIBUF_X4_Y0_N1
A1L34 = INPUT_BUFFER(.I(switch[7]), );


--switch[7] is switch[7] at PIN_AC9
switch[7] = INPUT();


--A1L20 is switch[0]~input at IOIBUF_X12_Y0_N18
A1L20 = INPUT_BUFFER(.I(switch[0]), );


--switch[0] is switch[0] at PIN_AB12
switch[0] = INPUT();


--A1L22 is switch[1]~input at IOIBUF_X16_Y0_N1
A1L22 = INPUT_BUFFER(.I(switch[1]), );


--switch[1] is switch[1] at PIN_AC12
switch[1] = INPUT();


--A1L24 is switch[2]~input at IOIBUF_X8_Y0_N35
A1L24 = INPUT_BUFFER(.I(switch[2]), );


--switch[2] is switch[2] at PIN_AF9
switch[2] = INPUT();


--A1L26 is switch[3]~input at IOIBUF_X4_Y0_N52
A1L26 = INPUT_BUFFER(.I(switch[3]), );


--switch[3] is switch[3] at PIN_AF10
switch[3] = INPUT();



--A1L4 is clk~inputCLKENA0 at CLKCTRL_G6
A1L4 = cyclonev_clkena(.INCLK = A1L3) WITH (clock_type = "Global Clock", ena_register_mode = "always enabled");


--C1L7Q is fsm:top_fsm|CurrentState.state_bit_0~DUPLICATE at FF_X10_Y1_N23
--register power-up is low

C1L7Q = DFFEAS(C1L6, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


--C1L9Q is fsm:top_fsm|CurrentState.state_bit_1~DUPLICATE at FF_X10_Y1_N26
--register power-up is low

C1L9Q = DFFEAS(C1L3, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


2. One hot shows stats as C1_CurrentState.CHECK_VAL and C1_CurrentState.READ_VAL.
 -- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.
--C1_CurrentState.READ_VAL is fsm:top_fsm|CurrentState.READ_VAL at FF_X13_Y1_N29
--register power-up is low

C1_CurrentState.READ_VAL = DFFEAS( , GLOBAL(A1L4), !A1L17,  ,  , C1L10,  ,  , VCC);


--C1_CurrentState.CHECK_VAL is fsm:top_fsm|CurrentState.CHECK_VAL at FF_X13_Y1_N26
--register power-up is low

C1_CurrentState.CHECK_VAL = DFFEAS(C1L4, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


--C1L10 is fsm:top_fsm|led~1 at LABCELL_X13_Y1_N18
C1L10 = ( C1_CurrentState.READ_VAL & ( C1_CurrentState.CHECK_VAL ) ) # ( !C1_CurrentState.READ_VAL & ( C1_CurrentState.CHECK_VAL ) ) # ( !C1_CurrentState.READ_VAL & ( !C1_CurrentState.CHECK_VAL ) );


--C1_CurrentState.VAL_TRUE is fsm:top_fsm|CurrentState.VAL_TRUE at FF_X13_Y1_N43
--register power-up is low

C1_CurrentState.VAL_TRUE = DFFEAS(C1L11, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


--C1_detected is fsm:top_fsm|detected at FF_X13_Y1_N47
--register power-up is low

C1_detected = DFFEAS(C1L2, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );


--C1L11 is fsm:top_fsm|NextState.VAL_TRUE~0 at LABCELL_X13_Y1_N42
C1L11 = ( C1L5Q & ( C1_detected ) );


--C1L1 is fsm:top_fsm|check_proc~0 at LABCELL_X13_Y1_N54
C1L1 = ( A1L20 & ( A1L22 & ( (!A1L24 & A1L26) ) ) );


--C1L2 is fsm:top_fsm|check_proc~1 at LABCELL_X13_Y1_N45
C1L2 = ( A1L30 & ( (C1L1 & (A1L34 & (A1L32 & !A1L28))) ) );


--C1L4 is fsm:top_fsm|CurrentState.CHECK_VAL~0 at LABCELL_X13_Y1_N24
C1L4 = ( !C1L7Q );


--A1L9 is led[0]~output at IOOBUF_X52_Y0_N2
A1L9 = OUTPUT_BUFFER.O(.I(C1L7Q), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[0] is led[0] at PIN_V16
led[0] = OUTPUT();


--A1L11 is led[1]~output at IOOBUF_X52_Y0_N19
A1L11 = OUTPUT_BUFFER.O(.I(!C1L10), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[1] is led[1] at PIN_W16
led[1] = OUTPUT();


--A1L13 is led[2]~output at IOOBUF_X60_Y0_N2
A1L13 = OUTPUT_BUFFER.O(.I(C1_CurrentState.VAL_TRUE), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[2] is led[2] at PIN_V17
led[2] = OUTPUT();


--A1L15 is led[3]~output at IOOBUF_X80_Y0_N2
A1L15 = OUTPUT_BUFFER.O(.I(C1_CurrentState.VAL_TRUE), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--led[3] is led[3] at PIN_V18
led[3] = OUTPUT();


--A1L6 is dout~output at IOOBUF_X12_Y0_N2
A1L6 = OUTPUT_BUFFER.O(.I(C1_detected), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--dout is dout at PIN_AA12
dout = OUTPUT();


--A1L3 is clk~input at IOIBUF_X32_Y0_N1
A1L3 = INPUT_BUFFER(.I(clk), );


--clk is clk at PIN_AF14
clk = INPUT();


--A1L17 is reset~input at IOIBUF_X36_Y0_N1
A1L17 = INPUT_BUFFER(.I(reset), );


--reset is reset at PIN_AA14
reset = INPUT();


--A1L28 is switch[4]~input at IOIBUF_X2_Y0_N41
A1L28 = INPUT_BUFFER(.I(switch[4]), );


--switch[4] is switch[4] at PIN_AD11
switch[4] = INPUT();


--A1L30 is switch[5]~input at IOIBUF_X16_Y0_N18
A1L30 = INPUT_BUFFER(.I(switch[5]), );


--switch[5] is switch[5] at PIN_AD12
switch[5] = INPUT();


--A1L32 is switch[6]~input at IOIBUF_X4_Y0_N35
A1L32 = INPUT_BUFFER(.I(switch[6]), );


--switch[6] is switch[6] at PIN_AE11
switch[6] = INPUT();


--A1L34 is switch[7]~input at IOIBUF_X4_Y0_N1
A1L34 = INPUT_BUFFER(.I(switch[7]), );


--switch[7] is switch[7] at PIN_AC9
switch[7] = INPUT();


--A1L20 is switch[0]~input at IOIBUF_X12_Y0_N18
A1L20 = INPUT_BUFFER(.I(switch[0]), );


--switch[0] is switch[0] at PIN_AB12
switch[0] = INPUT();


--A1L22 is switch[1]~input at IOIBUF_X16_Y0_N1
A1L22 = INPUT_BUFFER(.I(switch[1]), );


--switch[1] is switch[1] at PIN_AC12
switch[1] = INPUT();


--A1L24 is switch[2]~input at IOIBUF_X8_Y0_N35
A1L24 = INPUT_BUFFER(.I(switch[2]), );


--switch[2] is switch[2] at PIN_AF9
switch[2] = INPUT();


--A1L26 is switch[3]~input at IOIBUF_X4_Y0_N52
A1L26 = INPUT_BUFFER(.I(switch[3]), );


--switch[3] is switch[3] at PIN_AF10
switch[3] = INPUT();



--A1L4 is clk~inputCLKENA0 at CLKCTRL_G6
A1L4 = cyclonev_clkena(.INCLK = A1L3) WITH (clock_type = "Global Clock", ena_register_mode = "always enabled");


--C1L7Q is fsm:top_fsm|CurrentState.READ_VAL~DUPLICATE at FF_X13_Y1_N28
--register power-up is low

C1L7Q = DFFEAS( , GLOBAL(A1L4), !A1L17,  ,  , C1L10,  ,  , VCC);


--C1L5Q is fsm:top_fsm|CurrentState.CHECK_VAL~DUPLICATE at FF_X13_Y1_N25
--register power-up is low

C1L5Q = DFFEAS(C1L4, GLOBAL(A1L4), !A1L17,  ,  ,  ,  ,  ,  );
